// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mercadolibre/fury_go-toolkit-kvs/pkg/kvs (interfaces: QueryableClient)

// Package kvs is a generated GoMock package.
package kvs

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kvs "github.com/mercadolibre/fury_go-toolkit-kvs/pkg/kvs"
)

// MockQueryableClient is a mock of QueryableClient interface.
type MockQueryableClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueryableClientMockRecorder
}

// MockQueryableClientMockRecorder is the mock recorder for MockQueryableClient.
type MockQueryableClientMockRecorder struct {
	mock *MockQueryableClient
}

// NewMockQueryableClient creates a new mock instance.
func NewMockQueryableClient(ctrl *gomock.Controller) *MockQueryableClient {
	mock := &MockQueryableClient{ctrl: ctrl}
	mock.recorder = &MockQueryableClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryableClient) EXPECT() *MockQueryableClientMockRecorder {
	return m.recorder
}

// BatchDelete mocks base method.
func (m *MockQueryableClient) BatchDelete(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDelete indicates an expected call of BatchDelete.
func (mr *MockQueryableClientMockRecorder) BatchDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockQueryableClient)(nil).BatchDelete), arg0, arg1)
}

// BatchGet mocks base method.
func (m *MockQueryableClient) BatchGet(arg0 context.Context, arg1 []string) (map[string]kvs.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGet", arg0, arg1)
	ret0, _ := ret[0].(map[string]kvs.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockQueryableClientMockRecorder) BatchGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockQueryableClient)(nil).BatchGet), arg0, arg1)
}

// BatchSet mocks base method.
func (m *MockQueryableClient) BatchSet(arg0 context.Context, arg1 []kvs.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchSet indicates an expected call of BatchSet.
func (mr *MockQueryableClientMockRecorder) BatchSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSet", reflect.TypeOf((*MockQueryableClient)(nil).BatchSet), arg0, arg1)
}

// BulkDelete mocks base method.
func (m *MockQueryableClient) BulkDelete(arg0 context.Context, arg1 []string) (kvs.Bulk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDelete", arg0, arg1)
	ret0, _ := ret[0].(kvs.Bulk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkDelete indicates an expected call of BulkDelete.
func (mr *MockQueryableClientMockRecorder) BulkDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDelete", reflect.TypeOf((*MockQueryableClient)(nil).BulkDelete), arg0, arg1)
}

// BulkGet mocks base method.
func (m *MockQueryableClient) BulkGet(arg0 context.Context, arg1 []string) (kvs.Bulk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkGet", arg0, arg1)
	ret0, _ := ret[0].(kvs.Bulk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkGet indicates an expected call of BulkGet.
func (mr *MockQueryableClientMockRecorder) BulkGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkGet", reflect.TypeOf((*MockQueryableClient)(nil).BulkGet), arg0, arg1)
}

// BulkSet mocks base method.
func (m *MockQueryableClient) BulkSet(arg0 context.Context, arg1 []kvs.Item) (kvs.Bulk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkSet", arg0, arg1)
	ret0, _ := ret[0].(kvs.Bulk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkSet indicates an expected call of BulkSet.
func (mr *MockQueryableClientMockRecorder) BulkSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkSet", reflect.TypeOf((*MockQueryableClient)(nil).BulkSet), arg0, arg1)
}

// Delete mocks base method.
func (m *MockQueryableClient) Delete(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockQueryableClientMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQueryableClient)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockQueryableClient) Get(arg0 context.Context, arg1 string) (kvs.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(kvs.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQueryableClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQueryableClient)(nil).Get), arg0, arg1)
}

// Range mocks base method.
func (m *MockQueryableClient) Range(arg0 context.Context, arg1 kvs.Query, arg2 func([]kvs.Item, error) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Range", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Range indicates an expected call of Range.
func (mr *MockQueryableClientMockRecorder) Range(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockQueryableClient)(nil).Range), arg0, arg1, arg2)
}

// Set mocks base method.
func (m *MockQueryableClient) Set(arg0 context.Context, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockQueryableClientMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockQueryableClient)(nil).Set), arg0, arg1, arg2)
}
