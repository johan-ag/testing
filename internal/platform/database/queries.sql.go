// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const findUser = `-- name: FindUser :one
SELECT id, name, age FROM ` + "`" + `users` + "`" + ` WHERE ` + "`" + `id` + "`" + ` = ?
`

func (q *Queries) FindUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, findUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Age)
	return i, err
}

const findUserByParams = `-- name: FindUserByParams :many
SELECT id, name, age FROM ` + "`" + `users` + "`" + ` WHERE ` + "`" + `name` + "`" + ` = ? AND ` + "`" + `age` + "`" + ` = ?
`

type FindUserByParamsParams struct {
	Name string
	Age  int32
}

func (q *Queries) FindUserByParams(ctx context.Context, arg FindUserByParamsParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, findUserByParams, arg.Name, arg.Age)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.Age); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveUser = `-- name: SaveUser :execresult
INSERT INTO ` + "`" + `users` + "`" + ` (
    ` + "`" + `name` + "`" + `, ` + "`" + `age` + "`" + `
) VALUES ( ?, ? )
`

type SaveUserParams struct {
	Name string
	Age  int32
}

// Users
func (q *Queries) SaveUser(ctx context.Context, arg SaveUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, saveUser, arg.Name, arg.Age)
}
