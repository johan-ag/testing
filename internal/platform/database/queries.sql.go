// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const findBook = `-- name: FindBook :one
SELECT id, title, author FROM ` + "`" + `books` + "`" + ` WHERE ` + "`" + `id` + "`" + ` = ?
`

func (q *Queries) FindBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRowContext(ctx, findBook, id)
	var i Book
	err := row.Scan(&i.ID, &i.Title, &i.Author)
	return i, err
}

const findUser = `-- name: FindUser :one
SELECT id, name, age, random FROM ` + "`" + `users` + "`" + ` WHERE ` + "`" + `id` + "`" + ` = ?
`

func (q *Queries) FindUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, findUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Random,
	)
	return i, err
}

const saveBook = `-- name: SaveBook :execresult
INSERT INTO ` + "`" + `books` + "`" + ` (
    ` + "`" + `title` + "`" + `, ` + "`" + `author` + "`" + `
) VALUES ( ?, ? )
`

type SaveBookParams struct {
	Title  string
	Author int32
}

// Books
func (q *Queries) SaveBook(ctx context.Context, arg SaveBookParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, saveBook, arg.Title, arg.Author)
}

const saveUser = `-- name: SaveUser :execresult
INSERT INTO ` + "`" + `users` + "`" + ` (
    ` + "`" + `name` + "`" + `, ` + "`" + `age` + "`" + `, ` + "`" + `random` + "`" + `
) VALUES ( ?, ?, ? )
`

type SaveUserParams struct {
	Name   string
	Age    int32
	Random string
}

// Users
func (q *Queries) SaveUser(ctx context.Context, arg SaveUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, saveUser, arg.Name, arg.Age, arg.Random)
}
